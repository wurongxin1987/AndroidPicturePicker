apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "io.valuesfeng.demo"
        minSdkVersion 11
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        myConfig{
            storeFile file("key.jks")
            storePassword "123123"
            keyAlias "simple"
            keyPassword "123123"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.myConfig
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    repositories {
        flatDir {
            dirs 'libs' //this way we can find the .aar file in libs folder
        }
    }


}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
//    compile(name: 'gallery-release', ext: 'aar')
    compile project(':gallery')
}

afterEvaluate {
    android.applicationVariants.each { variant ->
        def dx = tasks.findByName("transformClassesWithDexFor${variant.name.capitalize()}")
        def mytask = "mytask${variant.name.capitalize()}"
        if (dx!=null) {
             task(mytask) << {
                def instrumenterFilePath = "$projectDir${File.separator}..${File.separator}full.jar"
                def javaByteCodePath = "${buildDir}/intermediates/classes/${variant.name}"
                def cmd = "java -version"

                println cmd

                exec{
                    commandLine cmd.split().toList()
                }
            }
            tasks.findByName(mytask).dependsOn dx.taskDependencies.getDependencies(dx)
            dx.dependsOn tasks.findByName(mytask)
        }
    }
}